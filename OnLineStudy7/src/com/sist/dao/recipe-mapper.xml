<?xml version="1.0" encoding="UTF-8"?>
<!-- PreparedStatement,ResultSet 
     1. 일반 JDBC (***)
     2. JOIN 
     3. PL/SQL
     4. 동적 SQL
-->
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- SQL문장을 저장하는 위치
     namespace : XML에서 package
 -->
<mapper namespace="com.sist.dao.recipe-mapper">
<!-- 
     (cache-ref | cache | resultMap* | parameterMap* | sql* | insert* | update* | delete* | select*)+
     * : 0번이상 사용이 가능  
     | : 선택 (필요한 부분만 사용이 가능)
     
     resultMap : 컬럼명과 VO에 등록된 변수명 틀릴경우에 매칭한다 
                 class AVO
                 {
                     private int no;
                 }
                 Database A테이블에 => mno
                 ==> JOIN사용시 반드시 사용 
                 SELECT empno,ename,job,emp.deptno,loc,dname
                                        =========== emp.deptno = deptno
                 FROM emp,dept
                 WHERE emp.deptno=dept.deptno;
     parameterMap : PL/SQL (PROCEDURE) 
                    CREATE PROCEDURE por_name(no NUMBER....)
     sql : 반복적으로 수행되는 부분을 모아서 재사용 
     insert : 데이터를 추가 
     update : 데이터를 수정 
     delete : 데이터를 삭제 
     select : 데이터를 검색 
     ***** MyBatis의 단점은 태그한개에 여러개의 SQL문장을 사용할 수 없다 
           태그 한개당 1개의 SQL문장을 작성한다 
      <select>
        SELECT * FROM emp
        SELECT * FROM dept ==> 오류 ==> SQL문장뒤에 ';'을 사용하면 오류
      </select>
      String sql="SELECT * FROM emp"
      
           데이터값을 설정
      SELECT * FROM emp WHERE empno=? 
      => ?를 사용하지 않는다   #{empno},${empno}
                        ======== ===========> 컬럼명 , 테이블명을 사용 
                                            일반 데이터 값  => getEmpno()
     ***** XML코드는 HTML가 다르게 대소문자를 구분 
     
         모든  태그는 필수적으로 사용해야 돼는 속성 : id (중복이 없어야 한다)
         ==> id를 가지고 SQL문장을 찾는다 
         <select id="aaa">
           SELECT * FROM emp
         </select>
         <select id="aaa">
           SELECT * FROM dept
         </select>
                 키      값  ======> Map : 키,값  (값은 중복이 가능,키는 중복을 할 수 없다)
         =======================
         aaa   SELECT * FROM emp
         aaa   SELECT * FROM dept
         =======================
 -->
   <!--  데이터를 가지고 오는 SQL (recipe)  -->
   <!-- 
        id  ========> 식별자 (sql문장을 찾아서 수행요청할때 사용되는 데이터)
        resultType ===> SQL문장을 실행시에 결과값을 받는 클래스 등록 
        
        <select id="aaa" resultType="RecipeVO">
          SELECT * FROM recipe => 실행한 결과 => RecipeVO => ArrayList
                                             =========를 받아서 ArrayList에 첨부
                                             selectList => VO를 받아서 add()
                                             selectOne  => VO 1개만 받는다 
        </select>
        <select id="aaa" resultType="int">
          SELECT COUNT(*) FROM recipe => 실행한 결과 => int
        </select>
        <select id="aaa" resultType="String">
          SELECT pwd FROM recipe => 실행한 결과 => String
        </select>
        
        paramterType : ?에 값을 첨부
        <select id="aaa" resultType="EmpVO" parameterType="int">
         SELECT * FROM emp
         WHERE empno=#{empno}
        </select>
        
        <select id="aaa" resultType="EmpVO" parameterType="EmpVO">
         SELECT * FROM emp
         WHERE empno=#{empno} AND ename=#{ename}
                     ========           =========
                     #{empno} => vo.getEmpno()  vo.getEname()
        </select>
        
              만약에 VO에 없는 데이터값(여러개 있는 경우)이 들어 갈때  ==> java.util.Map
        WHERE num BETWEEN #{start} AND #{end}
        
               요청에 들어가는 데이터가 여러개 있는 경우 : ~VO , Map
               
               resultType=""  값을 받을 경우
               parameterType="" ?에 값을 채워주는 변수를 설정(일반변수,~VO,Map)
    -->
   <select id="recipeListData" resultType="RecipeVO" parameterType="java.util.Map">
      SELECT no,title,poster,chef,num 
      FROM (SELECT no,title,poster,chef,rownum as num 
      FROM (SELECT no,title,poster,chef 
      FROM recipe ORDER BY no DESC))
      WHERE num BETWEEN #{start} AND #{end}
      <!-- 
            Map map=new HashMap()
            map.put("start",1)
            map.put("end",10)
            <select id="recipeListData" resultType="RecipeVO" parameterType="java.util.Map">
            DAO에서 메소드 제작 
            public RecipeVO recipeListData(Map map)
                   ========               =========
                   resultType             parameterType
            public ArrayList<RecipeVO> recipeListData(Map map)
                   ========               =========
                   resultType             parameterType
                   
            ? 사용하지 않고  #{} , ${}
       -->
   </select>
   <!-- 
       1. 사용법 
          1) XML을 이용해서 필요한 데이터 전송 
          2) Annotation을 이용해서 필요한 데이터 전송 
             ==========
       2. 속도,쉽게 코딩(마이바티스,스프링:표준화)=분석이 쉽다
                     ===================
                                                 라이브러리 
    -->
    <!-- 총페이지 구하기  -->
    <select id="recipeTotalPage" resultType="int">
      <!-- 
         resultType="int"
         parameterType="" 
         =필요시만 사용 
         
                 오라클 내장 함수
            = 단일행 함수
                            문자함수
                  LENGTH 
                  SUBSTR
                  INSTR
                  RPAD
                            숫자함수
                  ROUND , TRUNC , CEIL
                            날짜함수
                  SYSDATE , MONTHS_BETWEEN
                            변환함수
                  TO_CHAR
                            기타함수
                  NVL (CASE , DECODE)
            = 집합 함수
               COUNT , MAX  , RANK
               
       -->
       SELECT CEIL(COUNT(*)/12.0) FROM recipe
    </select>
</mapper> 








